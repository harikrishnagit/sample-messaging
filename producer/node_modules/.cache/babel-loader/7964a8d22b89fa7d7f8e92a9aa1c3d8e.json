{"ast":null,"code":"var _jsxFileName = \"/Users/harinarasimhamurthy/workspace/sample-messaging/producer/src/components/common/tables/OIPTable.js\";\nimport React from 'react';\nimport { Table, Form } from 'semantic-ui-react';\nimport Header from './Header';\nimport HeaderCell from './HeaderCell';\nimport Footer from './Footer';\nimport Row from './Row';\nimport Body from './Body';\nimport cellTypes from './cellTypes';\n\nclass OIPTable extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleTableType = () => {\n      const {\n        type,\n        summary,\n        scrollable,\n        collapsing,\n        children,\n        columns,\n        basic,\n        celled\n      } = this.props;\n      let table;\n\n      switch (type) {\n        case 'entry':\n          table = /*#__PURE__*/React.createElement(Table, {\n            selectable: true,\n            celled: celled ? celled : true,\n            collapsing: collapsing,\n            className: \"entryTable\",\n            summary: summary,\n            columns: columns,\n            basic: basic,\n            style: {\n              borderCollapse: 'collapse',\n              width: scrollable ? scrollable + '%' : ''\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 21\n            }\n          }, children);\n          break;\n\n        case 'static':\n          table = /*#__PURE__*/React.createElement(Table, {\n            selectable: true,\n            basic: true,\n            collapsing: collapsing,\n            className: \"staticTable\",\n            summary: summary,\n            columns: columns,\n            basic: basic,\n            style: {\n              width: scrollable ? scrollable + '%' : ''\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 21\n            }\n          }, children);\n          break;\n\n        default:\n          table = /*#__PURE__*/React.createElement(Table, {\n            selectable: true,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 26\n            }\n          }, children);\n      }\n\n      return table;\n    };\n  }\n\n  render() {\n    const {\n      withForm\n    } = this.props;\n    return withForm === false ? this.handleTableType() : /*#__PURE__*/React.createElement(Form, {\n      className: \"tableForm\",\n      onSubmit: this.props.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }, this.handleTableType());\n  }\n\n}\n\nconst {\n  CheckboxCell,\n  TextCell\n} = cellTypes;\nOIPTable.Header = Header;\nOIPTable.Body = Body;\nOIPTable.Footer = Footer;\nOIPTable.Row = Row;\nOIPTable.CheckboxCell = CheckboxCell;\nOIPTable.HeaderCell = HeaderCell;\nOIPTable.TextCell = TextCell;\nexport default OIPTable;","map":{"version":3,"sources":["/Users/harinarasimhamurthy/workspace/sample-messaging/producer/src/components/common/tables/OIPTable.js"],"names":["React","Table","Form","Header","HeaderCell","Footer","Row","Body","cellTypes","OIPTable","Component","handleTableType","type","summary","scrollable","collapsing","children","columns","basic","celled","props","table","borderCollapse","width","render","withForm","handleSubmit","CheckboxCell","TextCell"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Table, Form } from 'semantic-ui-react';\nimport Header from './Header';\nimport HeaderCell from './HeaderCell';\nimport Footer from './Footer';\nimport Row from './Row';\nimport Body from './Body';\nimport cellTypes from './cellTypes';\n\nclass OIPTable extends React.Component {\n    handleTableType = () => {\n        const {\n            type,\n            summary,\n            scrollable,\n            collapsing,\n            children,\n            columns,\n            basic,\n            celled\n        } = this.props;\n        let table;\n        switch (type) {\n            case 'entry':\n                table = (\n                    <Table\n                        selectable\n                        celled={celled ? celled : true}\n                        collapsing={collapsing}\n                        className='entryTable'\n                        summary={summary}\n                        columns={columns}\n                        basic={basic}\n                        style={{\n                            borderCollapse: 'collapse',\n                            width: scrollable ? scrollable + '%' : ''\n                        }}\n                    >\n                        {children}\n                    </Table>\n                );\n                break;\n            case 'static':\n                table = (\n                    <Table\n                        selectable\n                        basic\n                        collapsing={collapsing}\n                        className='staticTable'\n                        summary={summary}\n                        columns={columns}\n                        basic={basic}\n                        style={{\n                            width: scrollable ? scrollable + '%' : ''\n                        }}\n                    >\n                        {children}\n                    </Table>\n                );\n                break;\n            default:\n                table = (<Table\n                    selectable\n                >\n                    {children}\n                </Table>);\n        }\n        return table;\n    }\n    render() {\n        const { withForm } = this.props;\n        return withForm === false ? (\n            this.handleTableType()\n        ) : (\n                <Form className='tableForm' onSubmit={this.props.handleSubmit}>\n                    {this.handleTableType()}\n                </Form>\n            )\n    }\n}\n\nconst {\n    CheckboxCell,\n    TextCell\n} = cellTypes;\n\n\nOIPTable.Header = Header;\nOIPTable.Body = Body;\nOIPTable.Footer = Footer;\nOIPTable.Row = Row;\nOIPTable.CheckboxCell = CheckboxCell;\nOIPTable.HeaderCell = HeaderCell;\nOIPTable.TextCell = TextCell;\n\nexport default OIPTable;"]},"metadata":{},"sourceType":"module"}