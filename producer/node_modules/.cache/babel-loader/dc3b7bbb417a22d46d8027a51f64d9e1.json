{"ast":null,"code":"/*\n * Copyright 2016-2020 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n/**\n * Module Dependencies\n */\n\nconst crypto = require('crypto');\n/**\n * Constants\n */\n\n\nconst digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nconst base = 36;\nconst preLen = 12;\nconst seqLen = 10;\nconst maxSeq = 3656158440062976; // base^seqLen == 36^10\n\nconst minInc = 33;\nconst maxInc = 333;\nconst totalLen = preLen + seqLen;\nexports.version = require('../package.json').version;\n/**\n * Create and initialize a nuid.\n *\n * @api private\n */\n\nfunction Nuid() {\n  this.buf = Buffer.alloc(totalLen);\n  this.init();\n}\n/**\n * Initializes a nuid with a crypto random prefix,\n * and pseudo-random sequence and increment.\n *\n * @api private\n */\n\n\nNuid.prototype.init = function () {\n  this.setPre();\n  this.initSeqAndInc();\n  this.fillSeq();\n};\n/**\n * Initializes the pseudo randmon sequence number and the increment range.\n *\n * @api private\n */\n\n\nNuid.prototype.initSeqAndInc = function () {\n  this.seq = Math.floor(Math.random() * maxSeq);\n  this.inc = Math.floor(Math.random() * (maxInc - minInc) + minInc);\n};\n/**\n * Sets the prefix from crypto random bytes. Converts to base36.\n *\n * @api private\n */\n\n\nNuid.prototype.setPre = function () {\n  const cbuf = crypto.randomBytes(preLen);\n\n  for (let i = 0; i < preLen; i++) {\n    const di = cbuf[i] % base;\n    this.buf[i] = digits.charCodeAt(di);\n  }\n};\n/**\n * Fills the sequence part of the nuid as base36 from this.seq.\n *\n * @api private\n */\n\n\nNuid.prototype.fillSeq = function () {\n  let n = this.seq;\n\n  for (let i = totalLen - 1; i >= preLen; i--) {\n    this.buf[i] = digits.charCodeAt(n % base);\n    n = Math.floor(n / base);\n  }\n};\n/**\n * Returns the next nuid.\n *\n * @api private\n */\n\n\nNuid.prototype.next = function () {\n  this.seq += this.inc;\n\n  if (this.seq > maxSeq) {\n    this.setPre();\n    this.initSeqAndInc();\n  }\n\n  this.fillSeq();\n  return this.buf.toString('ascii');\n};\n/* Global Nuid */\n\n\nconst g = new Nuid();\n/**\n * Resets the prefix of the global nuid, as well as the\n * pseudo random sequence number and increment amounts.\n *\n * @api public\n */\n\nexports.reset = function () {\n  g.init();\n};\n/**\n * Returns the next nuid from the global.\n *\n * @api public\n */\n\n\nexports.next = function () {\n  return g.next();\n};\n/**\n * This here to facilitate testing\n * @api private\n */\n\n\nexports.getGlobalNuid = function () {\n  return g;\n};","map":{"version":3,"sources":["/Users/harinarasimhamurthy/workspace/sample-messaging/producer/node_modules/nuid/lib/nuid.js"],"names":["crypto","require","digits","base","preLen","seqLen","maxSeq","minInc","maxInc","totalLen","exports","version","Nuid","buf","Buffer","alloc","init","prototype","setPre","initSeqAndInc","fillSeq","seq","Math","floor","random","inc","cbuf","randomBytes","i","di","charCodeAt","n","next","toString","g","reset","getGlobalNuid"],"mappings":"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","sourcesContent":["/*\n * Copyright 2016-2020 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'use strict'\n\n/**\n * Module Dependencies\n */\n\nconst crypto = require('crypto')\n\n/**\n * Constants\n */\nconst digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nconst base = 36\nconst preLen = 12\nconst seqLen = 10\nconst maxSeq = 3656158440062976 // base^seqLen == 36^10\nconst minInc = 33\nconst maxInc = 333\nconst totalLen = preLen + seqLen\n\nexports.version = require('../package.json').version\n\n/**\n * Create and initialize a nuid.\n *\n * @api private\n */\n\nfunction Nuid () {\n  this.buf = Buffer.alloc(totalLen)\n  this.init()\n}\n\n/**\n * Initializes a nuid with a crypto random prefix,\n * and pseudo-random sequence and increment.\n *\n * @api private\n */\n\nNuid.prototype.init = function () {\n  this.setPre()\n  this.initSeqAndInc()\n  this.fillSeq()\n}\n\n/**\n * Initializes the pseudo randmon sequence number and the increment range.\n *\n * @api private\n */\n\nNuid.prototype.initSeqAndInc = function () {\n  this.seq = Math.floor(Math.random() * maxSeq)\n  this.inc = Math.floor((Math.random() * (maxInc - minInc)) + minInc)\n}\n\n/**\n * Sets the prefix from crypto random bytes. Converts to base36.\n *\n * @api private\n */\n\nNuid.prototype.setPre = function () {\n  const cbuf = crypto.randomBytes(preLen)\n  for (let i = 0; i < preLen; i++) {\n    const di = cbuf[i] % base\n    this.buf[i] = digits.charCodeAt(di)\n  }\n}\n\n/**\n * Fills the sequence part of the nuid as base36 from this.seq.\n *\n * @api private\n */\n\nNuid.prototype.fillSeq = function () {\n  let n = this.seq\n  for (let i = totalLen - 1; i >= preLen; i--) {\n    this.buf[i] = digits.charCodeAt(n % base)\n    n = Math.floor(n / base)\n  }\n}\n\n/**\n * Returns the next nuid.\n *\n * @api private\n */\n\nNuid.prototype.next = function () {\n  this.seq += this.inc\n  if (this.seq > maxSeq) {\n    this.setPre()\n    this.initSeqAndInc()\n  }\n  this.fillSeq()\n  return (this.buf.toString('ascii'))\n}\n\n/* Global Nuid */\nconst g = new Nuid()\n\n/**\n * Resets the prefix of the global nuid, as well as the\n * pseudo random sequence number and increment amounts.\n *\n * @api public\n */\n\nexports.reset = function () {\n  g.init()\n}\n\n/**\n * Returns the next nuid from the global.\n *\n * @api public\n */\n\nexports.next = function () {\n  return g.next()\n}\n\n/**\n * This here to facilitate testing\n * @api private\n */\nexports.getGlobalNuid = function () {\n  return g\n}\n"]},"metadata":{},"sourceType":"script"}